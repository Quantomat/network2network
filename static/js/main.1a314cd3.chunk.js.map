{"version":3,"sources":["scenes/landing-page.js","components/AccountCard.js","scenes/account.js","components/ValidatorCard.js","scenes/validators.js","scenes/nav-bar.js","utils/polka.js","App.js","serviceWorker.js","index.js"],"names":["LandingPage","useState","useEffect","className","head","style","textAlign","AccountCard","image","address","balance","activeTab","setActiveTab","value","onChange","onClick","src","config","headers","AccountPage","setBalance","setImage","a","provider","WsProvider","ApiPromise","create","api","query","system","account","previousFree","data","free","getApi","axios","method","url","then","r","Object","keys","catch","e","console","log","marginTop","Grid","container","direction","justify","alignItems","item","ValidatorCard","validators","Fragment","width","height","border","alt","NavBar","myAddress","setAccount","open","setOpen","fontWeight","horizontalAlign","verticalAlign","to","disabled","target","placeholder","marginLeft","square","substr","size","getValidators","session","length","Promise","all","map","authorityId","validatorBalances","validatorsList","index","toString","toHuman","nonce","stringToU8a","require","default","App","setMyAddress","ALICE_SEED","Math","random","substring","padEnd","keyring","Keyring","pairAlice","addFromSeed","getPair","path","Boolean","window","location","hostname","match","ResetStyles","createGlobalStyle","reset","ReactDOM","render","StrictMode","theme","themes","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1a314cd3.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../App.css';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport {\n  Table,\n  TableHead,\n  TableRow,\n  WindowHeader,\n  TableHeadCell,\n  TableBody,\n  Window,\n  TableDataCell,\n  WindowContent,\n} from 'react95';\n\nfunction LandingPage() {\n  const [api, setApi] = useState(null);\n\n  useEffect(() => {}, []);\n\n  return (\n    <div className=\"App-header\">\n      <Window>\n        <WindowHeader>Last Transactions</WindowHeader>\n\n        <WindowContent>\n          <Table>\n            <TableHead>\n              <TableRow head>\n                <TableHeadCell>Type</TableHeadCell>\n\n                <TableHeadCell>From</TableHeadCell>\n                <TableHeadCell>To</TableHeadCell>\n\n                <TableHeadCell>Value</TableHeadCell>\n              </TableRow>\n            </TableHead>\n\n            <TableBody>\n              <TableRow>\n                <TableDataCell style={{ textAlign: 'center' }}>\n                  🌿\n                </TableDataCell>\n\n                <TableDataCell>Bulbasaur</TableDataCell>\n                <TableDataCell>Bulbasaur</TableDataCell>\n\n                <TableDataCell>64</TableDataCell>\n              </TableRow>\n\n              <TableRow>\n                <TableDataCell style={{ textAlign: 'center' }}>\n                  🔥\n                </TableDataCell>\n\n                <TableDataCell>Charizard</TableDataCell>\n                <TableDataCell>Charizard</TableDataCell>\n\n                <TableDataCell>209</TableDataCell>\n              </TableRow>\n\n              <TableRow>\n                <TableDataCell style={{ textAlign: 'center' }}>\n                  ⚡\n                </TableDataCell>\n\n                <TableDataCell>Pikachu</TableDataCell>\n                <TableDataCell>Pikachu</TableDataCell>\n\n                <TableDataCell>82</TableDataCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </WindowContent>\n      </Window>{' '}\n    </div>\n  );\n}\n\nexport default LandingPage;\n","import React, { useState } from 'react';\nimport {\n  Fieldset,\n  Window,\n  WindowContent,\n  WindowHeader,\n  Tabs,\n  TabBody,\n  Tab,\n} from 'react95';\n\nconst AccountCard = ({ image, address, balance }) => {\n  const [activeTab, setActiveTab] = useState(0);\n\n  return (\n    <Window>\n      <WindowContent>\n        <WindowHeader>💰 My Wallet</WindowHeader>\n        <Tabs value={activeTab} onChange={(value) => setActiveTab(value)}>\n          <Tab value={0} onClick={() => setActiveTab(0)}>\n            Avatar\n          </Tab>\n\n          <Tab value={1} onClick={() => setActiveTab(1)}>\n            My Tokens\n          </Tab>\n\n          <Tab value={2} onClick={() => setActiveTab(2)}>\n            History\n          </Tab>\n        </Tabs>\n        {activeTab === 0 && (\n          <TabBody>\n            <Fieldset>\n              {image && <img src={`data:image/jpeg;base64,${image}`} />}\n              <p>{address}</p>\n              <p>{balance}</p>\n            </Fieldset>\n          </TabBody>\n        )}\n        {activeTab === 1 && (\n          <TabBody>\n            <Fieldset>\n              {image && <img src={`data:image/jpeg;base64,${image}`} />}\n              <p>{address}</p>\n              <p>{balance}</p>\n            </Fieldset>\n          </TabBody>\n        )}\n        {activeTab === 2 && (\n          <TabBody>\n            <Fieldset>\n              {image && <img src={`data:image/jpeg;base64,${image}`} />}\n              <p>{address}</p>\n              <p>{balance}</p>\n            </Fieldset>\n          </TabBody>\n        )}\n      </WindowContent>\n    </Window>\n  );\n};\n\nexport default AccountCard;\n","import React, { useEffect, useState } from 'react';\nimport '../App.css';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport AccountCard from '../components/AccountCard';\nimport { Grid } from '@material-ui/core';\nimport axios from 'axios';\nvar config = {\n  headers: {\n    'Content-Type': 'application/json',\n  },\n};\n\nfunction AccountPage({ address }) {\n  const [balance, setBalance] = useState(0);\n  const [image, setImage] = useState(null);\n\n  const getImage = () => {\n    axios({\n      method: 'post',\n      url: 'http://localhost:3141/kusama',\n      data: {\n        [address]: balance,\n      },\n      config,\n    })\n      .then((r) => {\n        const data = r.data;\n        setImage(data[Object.keys(data)[0]]);\n      })\n      .catch((e) => console.log(e));\n  };\n\n  useEffect(() => {\n    const getApi = async () => {\n      const provider = new WsProvider('wss://kusama-rpc.polkadot.io/');\n      const api = await ApiPromise.create({ provider: provider });\n      let {\n        data: { free: previousFree },\n      } = await api.query.system.account(address);\n      setBalance(`${previousFree}`);\n    };\n\n    getApi();\n    getImage();\n  }, [address]);\n\n  return (\n    <div className=\"App-header\">\n      <span style={{ marginTop: '200px' }}>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            <AccountCard\n              image={image}\n              address={address}\n              balance={balance}\n            ></AccountCard>\n          </Grid>\n        </Grid>\n      </span>\n    </div>\n  );\n}\n\nexport default AccountPage;\n","import React, { useState } from 'react';\nimport { Fieldset, Window, WindowContent } from 'react95';\n\nconst ValidatorCard = ({ image, address, balance }) => {\n  return (\n    <Window>\n      <WindowContent>\n        <Fieldset>\n          {image && <img src={`data:image/jpeg;base64,${image}`} />}\n          <p>{address}</p>\n          <p>{balance}</p>\n        </Fieldset>\n      </WindowContent>\n    </Window>\n  );\n};\n\nexport default ValidatorCard;\n","import React, { useEffect, useState } from 'react';\nimport '../App.css';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport ValidatorCard from '../components/ValidatorCard';\nimport axios from 'axios';\nvar config = {\n  headers: {\n    'Content-Type': 'application/json',\n  },\n};\n\nfunction AccountPage({ validators }) {\n  const [balance, setBalance] = useState(0);\n  const [images, setImages] = useState([]);\n\n  const getImages = (data) => {\n    axios({\n      method: 'post',\n      url: 'http://localhost:3141/kusama',\n      data: data,\n      config,\n    })\n      .then((r) => {\n        const data = r.data;\n        console.log(data);\n        setImages(data);\n      })\n      .catch((e) => console.log(e));\n  };\n\n  /*   useEffect(() => {\n    const validatorsShortList = validators.slice(0, 5);\n\n    validatorsShortList.map(async (el) => {\n      const data = {};\n      data[el.address] = el.balance.slice(0, 2);\n      await getImages(data);\n    });\n  }, []); */\n\n  return (\n    <React.Fragment>\n      <div className=\"App-header\">\n        <img\n          src=\"http://i.picasion.com/gl/90/cQ2e.gif\"\n          width=\"479\"\n          height=\"64\"\n          border=\"0\"\n          alt=\"http://picasion.com/gl/cQ2e/\"\n        />\n        <span>\n          <ValidatorCard balance={balance}></ValidatorCard>\n        </span>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default AccountPage;\n","import React, { useState } from 'react';\nimport '../App.css';\nimport {\n  AppBar,\n  Toolbar,\n  Button,\n  TextField,\n  Avatar,\n  Hourglass,\n  List,\n  ListItem,\n  Divider,\n} from 'react95';\nimport Grid from '@material-ui/core/Grid';\nimport { Link } from '@reach/router';\n\nfunction NavBar({ myAddress, image }) {\n  const [account, setAccount] = useState('');\n  const [open, setOpen] = useState(false);\n\n  const handleChange = (e) => setAccount(e.target.value);\n  const truncate = (str) => {\n    return str.substr(0, 4) + '... ';\n  };\n  return (\n    <AppBar>\n      <Toolbar>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            <Button\n              style={{ fontWeight: 'bold' }}\n              onClick={() => setOpen(!open)}\n            >\n              👾 Start\n            </Button>\n            {open && (\n              <List horizontalAlign=\"left\" verticalAlign=\"bottom\">\n                <Link to={`/`}>\n                  <ListItem>👨‍💻 Home</ListItem>\n                </Link>\n\n                <Link to={`account/${myAddress}`}>\n                  <ListItem>📁 My wallet</ListItem>\n                </Link>\n\n                <ListItem>🌐 Change Network</ListItem>\n                <Link to={`validators`}>\n                  <ListItem>💂‍♂️ Validators</ListItem>\n                </Link>\n\n                <Divider />\n\n                <ListItem disabled>🔙 Logout</ListItem>\n              </List>\n            )}\n          </Grid>\n          <Grid item></Grid>\n          <Grid item>\n            <TextField\n              onChange={handleChange}\n              placeholder=\"Address...\"\n              width={150}\n              style={{ marginLeft: 4 }}\n            />\n          </Grid>\n          <Grid item>\n            <Link to={`account/${account}`}>\n              <Button square>🔍</Button>\n            </Link>{' '}\n          </Grid>\n        </Grid>\n        {image ? (\n          <>\n            <Link to={`account/${myAddress}`}>{truncate(myAddress)}</Link>\n            <Link to={`account/${myAddress}`}>\n              <Avatar>\n                <img src={`data:image/jpeg;base64,${image}`} />{' '}\n              </Avatar>\n            </Link>\n          </>\n        ) : (\n          <Hourglass size={32} />\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default NavBar;\n","import { ApiPromise, WsProvider } from '@polkadot/api';\n\nexport const getValidators = async () => {\n  const provider = new WsProvider('wss://kusama-rpc.polkadot.io/');\n  const api = await ApiPromise.create({ provider: provider });\n\n  const validators = await api.query.session.validators();\n  if (validators && validators.length > 0) {\n    const validatorBalances = await Promise.all(\n      validators.map((authorityId) => api.query.system.account(authorityId))\n    );\n\n    const validatorsList = validators.map((authorityId, index) => ({\n      address: authorityId.toString(),\n      balance: validatorBalances[index].data.free.toHuman(),\n      nonce: validatorBalances[index].nonce.toHuman(),\n    }));\n    return validatorsList;\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport LandingPage from './scenes/landing-page';\nimport AccountPage from './scenes/account';\nimport ValidatorsPage from './scenes/validators';\nimport { Keyring } from '@polkadot/api';\nimport NavBar from './scenes/nav-bar';\nimport { Router } from '@reach/router';\nimport axios from 'axios';\nimport { getValidators } from './utils/polka';\n\nconst stringToU8a = require('@polkadot/util/string/toU8a').default;\n\nconst generateRandomString = () => {\n  return (\n    Math.random().toString(36).substring(2, 15) +\n    Math.random().toString(36).substring(2, 15)\n  );\n};\n\nvar config = {\n  headers: {\n    'Content-Type': 'application/json',\n  },\n};\n\nfunction App() {\n  const [myAddress, setMyAddress] = useState(null);\n  const [image, setImage] = useState(null);\n\n  useEffect(() => {\n    const ALICE_SEED = generateRandomString().padEnd(32, ' ');\n    const keyring = new Keyring();\n    const pairAlice = keyring.addFromSeed(stringToU8a(ALICE_SEED));\n    const address = `${keyring.getPair(pairAlice.address).address}`;\n    setMyAddress(address);\n\n    const getImage = () => {\n      axios({\n        method: 'post',\n        url: 'http://localhost:3141/kusama',\n        data: {\n          [address]: 0,\n        },\n        config,\n      })\n        .then((r) => {\n          const data = r.data;\n          setImage(data[Object.keys(data)[0]]);\n        })\n        .catch((e) => console.log(e));\n    };\n\n    getImage();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <NavBar myAddress={myAddress} image={image}></NavBar>\n      <Router>\n        <LandingPage path=\"/\" />\n        <AccountPage path=\"account/:address\" />\n        <ValidatorsPage validators={getValidators()} path=\"validators\" />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { reset, themes } from 'react95';\n\nconst ResetStyles = createGlobalStyle`\n  ${reset}\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <ResetStyles />\n    <ThemeProvider theme={themes.default}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}